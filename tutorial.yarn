// lastSavedUnix: 2025-04-07T09:07:15.922Z

title: Start
tags: 
position: -120,-120
colorID: 0
---
旁白: 这里开始第二章内容。

Yarn教学: Yarn Spinner 是一种用于编写游戏对话的语言！
Yarn教学: 你可以用它来编写分支对话，并在游戏引擎中使用！

Yarn教学: 例如，这里有一些选项供你选择！

-> 我: 哇，有选项可以选！
	Yarn教学: 选的好，朋友！
-> 我: 我可以在选项中放入文本吗？
	Yarn教学: 当然可以！
	Yarn教学: 例如，这里有一些选项中的行。
	Yarn教学: 你甚至可以在选项中嵌套其他选项！
	-> Yarn教学: 像这样！
		我: 哇！
	-> Yarn教学: 或者这样！
		我: 不可思议！

// 注释以两个斜杠开头，不会在对话中显示。
// 它们适合用来做一些备注！

Yarn教学: 你还可以编写“命令”，它们代表游戏中发生的事情！

Yarn教学: 在这个编辑器中，它们会以文本形式出现：

<<fade_up 1.0>>

-> 我: 不错！
	Yarn教学: 是吧？？
-> 我: 但它实际上没有淡出！
	Yarn教学: 那是因为这个页面不了解“淡出”或任何其他功能。
	Yarn教学: 当你在这个页面上测试脚本还没有做支持的命令时，我们只会以文本形式输出在你的控制台中。
	Yarn教学: 在真实的游戏中，你可以定义执行有用工作的自定义命令！

Yarn教学: 你还可以使用变量来存储信息！

Yarn教学: 让我们设置一个名为“$name”的变量。

<<set $name to "Yarn">>

Yarn教学: 完成！“$name”已经存储到了内存里。

Yarn教学: 我们可以在行中使用“$name”：我的名字是{$name}！

-> 我: 我可以在变量中存储什么？
	Yarn教学: 你可以存储文本、数字和真/假值！
-> 我: 变量存储在哪里？
	Yarn教学: 在这个页面中，我们将它们存储在内存中。当你在像 Dora SSR  这样的游戏引擎中使用 Yarn Spinner 时，你可以将它们存储在内存中，或者编写自定义代码，将它们与游戏的其他保存数据一起存储在磁盘上！

Yarn教学: 我们还可以使用“if”语句来改变发生的事情！

Yarn教学: 让我们将一个名为“$gold”的变量设置为 5。

<<set $gold to 5>>

Yarn教学: 接下来，让我们根据“$gold”中的值运行不同的行：

<<if $gold > 5>>
	Yarn教学: “$gold”变量大于 5！
<<else>>
	Yarn教学: “$gold”变量小于或等于 5！
<<endif>>

Yarn教学: 最后，我们可以使用“jump”命令跳转到另一个节点！现在就来试试吧！

<<jump OtherNode>>
===

title: OtherNode
tags: 
position: -120,160
colorID: 0
---
Yarn教学: 我们现在在另一个节点！节点可以让你将内容分成不同的块，这样更容易管理。

Yarn教学: 我们完成了！试着更改编辑器中的文本，然后再次点击测试！
===
